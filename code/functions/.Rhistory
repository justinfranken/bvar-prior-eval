install.packages("rvest")
library(rvest)
library(rvest)
ticker = 'AAPL'
paste0("https://finance.yahoo.com/quote/", ticker, "/financials?p=", ticker)
install.packages("edgarWebR")
lapply(c("rvest", "edgarWebR"), require, character.only = TRUE)
company_ticker <- "AAPL"
company_ticker <- "AAPL"
filings <- company_filings(company_ticker, type = "10-Q")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin/1.0 (justin@gmx.de)")
filings <- company_filings(company_ticker, type = "10-Q")
Sys.getenv("EDGARWEBR_USER_AGENT")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin/1.0 (justin272@gmx.de)")
filings <- company_filings(company_ticker, type = "10-Q")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin Franken/1.0 (justin272@gmx.de)")
filings <- company_filings(company_ticker, type = "10-Q")
# Define the base URL for EDGAR filings search
base_url <- "https://www.sec.gov/cgi-bin/browse-edgar"
# Set the query parameters
query <- list(
action = "getcompany",
CIK = "AAPL",       # Replace with the desired company's CIK or ticker
type = "10-Q",      # Filing type
dateb = "",         # End date (optional)
owner = "exclude",
count = "100"       # Number of results to fetch
)
# Send the request
response <- read_html(httr::GET(base_url, query = query))
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin justin272@gmx.de")
filings <- company_filings(company_ticker, type = "10-Q")
install.packages("edgar")
library("edgar")
useragent = "Justin Franken justin272@gmx.de"
info <- getFilingInfo('933691', 2021, quarter = c(1,2,3,4), form.type = 'ALL', useragent)
detach("package:edgar", unload = TRUE)
remove.packages("edgar")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.de")
filings <- company_filings(company_ticker, type = "10-Q")
?Sys.setenv
# Set your User-Agent as per SEC guidelines
set_user_agent(EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.de")
set_user_agent("Your Name (your_email@example.com)")
options(HTTPUserAgent = "Justin Franken justin272@gmx.de")
filings <- company_filings(company_ticker, type = "10-Q")
library(httr)
options(HTTPUserAgent = "Justin Franken justin272@gmx.de")
filings <- company_filings(company_ticker, type = "10-Q")
# Set your User-Agent as per SEC guidelines
set_user_agent(EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.de")
# Set your User-Agent as per SEC guidelines
EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.de"
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.de")
filings <- company_filings(company_ticker, type = "10-Q")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin Franken justin272@gmx.com")
filings <- company_filings(company_ticker, type = "10-Q")
Sys.getenv("EDGARWEBR_USER_AGENT")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = "Justin Franken (justin272@gmx.com)")
filings <- company_filings(company_ticker, type = "10-Q")
# Set your User-Agent as per SEC guidelines
Sys.setenv(EDGARWEBR_USER_AGENT = 'Justin Franken (justin272@gmx.com)')
EDGARWEBR_USER_AGENT <- Sys.getenv('Justin Franken (justin272@gmx.com)')
filings <- company_filings(company_ticker, type = "10-Q")
Sys.setenv(EDGARWEBR_USER_AGENT = 'Justin Franken (justin272@gmx.com)')
EDGARWEBR_USER_AGENT <- Sys.getenv('Justin Franken (justin272@gmx.com)')
filings <- company_filings(company_ticker, type = "10-Q")
Sys.setenv(EDGARWEBR_USER_AGENT = "yourcompanyname youremail")
filings <- company_filings(company_ticker, type = "10-Q")
install.packages("usethis")
# Set your User-Agent as per SEC guidelines
usethis::edit_r_environ()
library(jsonlite)
remove.packages("edgarWebR")
install.packages("dplyr")
library(rvest)
library(dplyr)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/income-statement?freq=Q"
URL <- GET(url, user_agent("Justin"))
View(URL)
temp <- read_html(URL) |>
html_node("body") |>
html_children() |>
html_text(trim = TRUE)
temp
tickers = c("AAPL")
i = 1
paste("https://www.macrotrends.net/assets/php/market_cap.php?t=", tickers[i],sep = "")
temp <- read_html(URL)
temp
temp$node
temp$doc
row_data <- temp %>% html_element("#row0jqxgrid") %>% html_text()
row_data
temp <- read_html(URL)
temp
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
temp <- read_html(URL)
bvps = temp |>
html_nodes("#style-1 td:nth-child(3)") |>
html_text()
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
temp <- read_html(URL)
page <- read_html(URL)
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
labels
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
labels
page <- read_html("https://macrotrends.net/stocks/charts/AAPL/apple/revenue")
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
labels
test <- page %>%
html_node("body")
test
test <- page %>%
html_node("body") %>%
html_nodes()
# Step 1: Read the webpage
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
page <- read_html(url)
# Step 2: Extract all script tags
scripts <- html_nodes(page, "script")
# Step 3: Identify the script containing 'var originalData'
script_content <- html_text(scripts)
# Look for the line containing 'var originalData ='
original_data_line <- script_content[str_detect(script_content, "var originalData")]
# Look for the line containing 'var originalData ='
original_data_line <- script_content[str_detect(script_content, "var originalData")]
library(stringr)
# Step 3: Identify the script containing 'var originalData'
script_content <- html_text(scripts)
library(rvest)
library(jsonlite)
# Step 1: Read the webpage
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
page <- read_html(url)
# Step 2: Extract all script tags
scripts <- html_nodes(page, "script")
# Step 3: Identify the script containing 'var originalData'
script_content <- html_text(scripts)
# Look for the line containing 'var originalData ='
original_data_line <- script_content[str_detect(script_content, "var originalData")]
# Step 4: Use a regex to extract the JSON array
# The pattern tries to match something like var originalData = [ ... ];
json_string <- str_extract(original_data_line, "var originalData = \\[(.*?)\\];")
# Clean the extracted string by removing 'var originalData = ' and trailing semicolon
json_string <- str_replace(json_string, "var originalData = ", "")
json_string <- str_replace(json_string, ";$", "")
# Step 5: Parse the JSON
data <- fromJSON(json_string)
# Step 1: Read the webpage
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
page <- read_html(url)
# Step 2: Extract all script tags
scripts <- html_nodes(page, "script")
# Step 3: Identify the script containing 'var originalData'
script_content <- html_text(scripts)
# Look for the line containing 'var originalData ='
original_data_line <- script_content[str_detect(script_content, "var originalData")]
# Step 4: Use a regex to extract the JSON array
# The pattern tries to match something like var originalData = [ ... ];
json_string <- str_extract(original_data_line, "var originalData = \\[(.*?)\\];")
# Clean the extracted string by removing 'var originalData = ' and trailing semicolon
json_string <- str_replace(json_string, "var originalData = ", "")
json_string <- str_replace(json_string, ";$", "")
# Step 5: Parse the JSON
data <- fromJSON(json_string)
View(scripts)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
library(rvest)
library(dplyr)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
library(httr)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
labels
test <- page %>%
html_node("body") %>%
html_nodes()
test <- page %>%
html_node("body") %>%
test <- page %>%
html_node("body")
library(dplyr)
detach("package:jsonlite", unload = TRUE)
detach("package:stringr", unload = TRUE)
remove.packages("stringr")
library(rvest)
library(dplyr)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
test <- page %>%
html_node("body")
test
View(test)
test$node
library(XML)
library(xml2)
test$node
test <- page %>%
html_node("body") %>%
html_children()
html_structure <- page %>% html_structure()
html_structure
html_structure <- page %>%
html_elements("amcharts-graph-column amcharts-graph-g1")
html_structure <- page %>%
html_elements("amcharts-graph-column amcharts-graph-g1")
labels <- page %>%
html_nodes("g.amcharts-graph-column.amcharts-graph-g1") %>%
html_attr("aria-label")
html_structure <- page %>%
html_elements("amcharts-graph-g1")
html_structure <- page %>%
html_elements("amcharts-graph-g1")
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
html_structure <- page %>%
html_elements("amcharts-graph-g1")
html_structure <- page %>%
html_elements("#chartdiv > div > div > div.amcharts-panels-div > div.amChartsPanel.amcharts-stock-panel-div.amcharts-stock-panel-div-stockPanel0 > div > div > svg > g:nth-child(8) > g")
html_structure <- page %>%
html_elements(xpath = "//*[@id="chartdiv"]/div/div/div[2]/div[1]/div/div/svg/g[7]/g")
html_structure <- page %>%
html_elements(xpath = '//*[@id="chartdiv"]/div/div/div[2]/div[1]/div/div/svg/g[7]/g')
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
html_structure <- page %>%
html_elements(xpath = '//*[@id="chartdiv"]/div/div/div[2]/div[1]/div/div/svg/g[7]/g')
View(html_structure)
html_structure <- page %>%
html_elements(xpath = '//*[@id="chartdiv"]/div/div/div[2]/div[1]/div/div/svg/g[7]/g/g/g[1]/path')
html_structure <- page %>%
html_elements(css = "#chartdiv svg > g:nth-child(7) > g")
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
html_doc <- read_html(URL)
top_level <- html_doc %>% html_children()
top_level
level1 <- top_level[[1]]
level1
level2 <- top_level[[1]]
level2
level2 <- top_level[[2]]
level2
levelx <- top_level[[2]]
levelx_children <- levelx %>% html_children()
levelx_children
levelx <- top_level[[2]]
levelx_children <- levelx %>% html_children()
levelx_children
View(levelx_children)
levelx_children <- levelx_children %>% html_children()
levelx_children
top_level <- html_doc %>% html_children()
top_level
body <- top_level[[2]]
body
body[[2]]
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
html_doc <- read_html(URL)
html_doc <- read_html(URL)
test <- html_doc %>%
html_nodes("script")
test
test <- html_doc %>%
html_nodes("script") %>%
thml_text()
test <- html_doc %>%
html_nodes("script") %>%
html_text()
test
svg_element <- webpage %>%
html_node(xpath = /html/body/div/div/div/div[2]/div[1]/div/div/svg/g[7]/g)
svg_element <- webpage %>%
html_node(xpath = "/html/body/div/div/div/div[2]/div[1]/div/div/svg/g[7]/g")
svg_element <- html_doc %>%
html_node(xpath = "/html/body/div/div/div/div[2]/div[1]/div/div/svg/g[7]/g")
View(svg_element)
install.packages("RSelenium")
library(RSelenium)
# Start Selenium
rD <- rsDriver(browser = "chrome", port = 4545L, verbose = FALSE)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
aria_labels <- page %>%
html_nodes(".amcharts-graph-column") %>%
html_attr("aria-label")
aria_labels <- page %>%
html_nodes(".amcharts-graph-column")
aria_labels <- page %>%
html_nodes("main_content")
page <- read_html(URL)
aria_labels <- page %>%
html_nodes("main_content")
aria_labels <- page %>%
html_nodes("body")
aria_labels
aria_labels <- page %>%
html_nodes("body") %>%
html_nodes("main_content")
aria_labels <- page %>%
html_nodes("body") %>%
html_children()
aria_labels
aria_labels <- page %>%
html_nodes("body") %>%
html_children() %>%
html_text()
aria_labels
aria_labels <- page %>%
html_nodes("script") %>%
html_text() %>%
str_subset("var chartData =")
library(rvest)
library(stringr)
library(jsonlite)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
library(httr)
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
aria_labels <- page %>%
html_nodes("script") %>%
html_text() %>%
str_subset("var chartData =")
url <- "view-source:https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
URL <- GET(url, user_agent("Justin"))
page <- read_html(URL)
aria_labels <- page %>%
html_nodes("script") %>%
html_text() %>%
str_subset("var chartData =")
View(page)
page <- read_html(url)
library(XML)
library(xml2)
page <- read_html(url)
remove.packages("RSelenium")
# Load required libraries
library(rvest)
library(dplyr)
# Define the URL
url <- "https://macrotrends.net/stocks/charts/AAPL/apple/revenue"
# Read the webpage
webpage <- read_html(url)
# Extract the "Apple Quarterly Revenue" table
table_data <- webpage %>%
html_node(xpath = "//table[contains(@class, 'historical_data_table')]") %>%
html_table(fill = TRUE)
View(table_data)
# Extract the "Apple Quarterly Revenue" table
tables <- webpage %>%
html_nodes(xpath = "//table[contains(@class, 'historical_data_table')]")
# Select the second table (Apple Quarterly Revenue)
quarterly_table <- tables[2] %>% html_table(fill = TRUE)
View(quarterly_table)
