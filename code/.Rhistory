varNames <- paste0("Y", 1:k)
rowNamesPhi <- c("Intercept")
for (i in 1:p) {
rowNamesPhi <- c(rowNamesPhi, paste0("Lag", rep(i, k)))
}
if(!intercept) rowNamesPhi <- rowNamesPhi[-1]
dimnames(Phi_post_median) <- list(rowNamesPhi, varNames)
dimnames(Sigma_post_median) <- list(varNames, varNames)
# view results
Phi_post_median
Sigma_post_median
# ---- predict data ------------------------------------------------------------
# draw from posterior predictive distribution
start <- Sys.time()
Y_forecasts <- predict_bvar(
Phi_store   = res_gibbs$Phi,
Sigma_store = res_gibbs$Sigma,
Yraw        = Yraw,
p           = p,
H           = 4,
draw_shocks = TRUE,
intercept = intercept,
n_cores = 2
)
pred <- Sys.time() - start
((pred + mcmc) * 10000) / (60*60)
# inspect results
alpha <- 0.05
Y_forecast_median <- apply(Y_forecasts, c(1, 2), median)
Y_forecast_ci_lower <- apply(Y_forecasts, c(1, 2), quantile, probs = alpha/2)
Y_forecast_ci_upper <- apply(Y_forecasts, c(1, 2), quantile, probs = (1-alpha/2))
Y_forecast_median
Y_forecast_ci_lower
Y_forecast_ci_upper
prior <- minnesota_prior(Yraw, p)
V0 <- prior$V0
v=
v0
V0
Y <- Yraw
Y
v0 <- k + 2
k <- ncol(Y)
temp_cov <- helper_build_cov_matrix(Y = Y, p = p, v = v0,
s2_diag = s2_diag,
intercept = intercept,
pi1 = pi1,
pi3 = pi3,
pi4 = pi4)
s2_diag = NULL
pi1 = 0.2
pi3 = 1
pi4 = 1000
# -- use standard Minnesota prior
M0 <- helper_build_M0(k, p, intercept, lag_mean)
temp_cov <- helper_build_cov_matrix(Y = Y, p = p, v = v0,
s2_diag = s2_diag,
intercept = intercept,
pi1 = pi1,
pi3 = pi3,
pi4 = pi4)
V0 <- temp_cov$V0
S0 <- temp_cov$S0
V0
S0
View(Yraw)
helper_eps_generator <- function(K,
T,
shock_diag_min = 0.05,
shock_diag_max = 0.2,
mean_vola = 0.03,
sd_vola = 0.01,
# --- individual shocks -----------------------
min_indiv_shocks,
max_indiv_shocks,
indiv_shock_length_min,
indiv_shock_length_max,
indiv_shock_ampl_min = 0.075,
indiv_shock_ampl_max = 0.2,
indiv_shock_decay = 0.5,
# --- high volatility period ------------------
min_high_vol_periods,
max_high_vol_periods,
high_vol_period_length_min,
high_vol_period_length_max,
high_vol_strength_min = 2,
high_vol_strength_max = 3.5,
# --- exogenous shocks ------------------------
min_exog_shocks,
max_exog_shocks,
exog_shock_length_min,
exog_shock_length_max,
exog_shock_ampl_min = 0.075,
exog_shock_ampl_max = 0.15,
exog_shock_decay = 0.5,
exog_shock_shift_range = 3) {
#' Helper function to creates a T*K matrix of shocks. First, draws from a
#' multivariate normal distribution with a correlation structure Rho. Can add
#' high vola periods and exogenous and individual shocks, where exogenous shocks
#' are correlated with high vola periods if they exist.
#'
#' Parameters:
#' - K (integer): Number of variables.
#' - T (integer): Number of observations.
#' - shock_diag_min, shock_diag_max (scalar): Range for the off-diagonal correlations.
#' - mean_vola, sd_vola (scalar): Mean and SD for drawing each firm's volatility.
#' --- shock parameters ------------------------------------------------------
#' - min_indiv_shocks, max_indiv_shocks, in_indiv_shocks,
#'   max_indiv_shocks, in_indiv_shocks, max_indiv_shocks (integer):
#'    - Range of how many "shocks" can appear in each variable's time series.
#' - indiv_shock_length_min, indiv_shock_length_max, exog_shock_length_min,
#'   exog_shock_length_max, high_vol_period_length_min,
#'   high_vol_period_length_max (integer):
#'    - Range of durations for these shocks.
#' - indiv_shock_ampl_min, indiv_shock_ampl_max, exog_shock_ampl_min,
#'   exog_shock_ampl_max (scalar):
#'    - Range for the amplitude of each shock.
#' - high_vol_strength_min, high_vol_strength_max (scalar):
#'    - Range for the intensity of increased volatility.
#' - indiv_shock_decay, exog_shock_decay (scalar): Decay factor for the shock.
#' - exog_shock_shift_range (integer): how many periods around the high-vol
#'   segment we shift exogenous shocks.
#'
#' Returns:
#' - A T*K matrix containing the simulation shocks.
# create baseline correlation matrix
Rho <- matrix(0, nrow = K, ncol = K)
diag(Rho) <- 1
for (r in 1:(K-1)) {
for (col in (r+1):K) {
x <- runif(1, min = shock_diag_min, max = shock_diag_max)
Rho[r, col] <- x
Rho[col, r] <- x
}
}
# construct the covariance matrix Sigma
sd_vec <- rnorm(K, mean = mean_vola, sd = sd_vola)
Sigma  <- diag(sd_vec) %*% Rho %*% diag(sd_vec)
# generate the base normal random vectors with covariance Sigma
cholSigma <- chol(Sigma)
Z         <- matrix(rnorm(T * K), nrow = T, ncol = K)
eps       <- Z %*% cholSigma
# --- PERIODS OF HIGHER VOLATILITY -------------------------------------------
number_high_vol_periods <- sample(min_high_vol_periods:max_high_vol_periods, 1)
hv_periods <- data.frame(
hv_start  = integer(number_high_vol_periods),
hv_length = integer(number_high_vol_periods)
)
if (number_high_vol_periods > 0) {
for (i in 1:number_high_vol_periods) {
hv_length <- sample(high_vol_period_length_min:high_vol_period_length_max, 1)
hv_start  <- sample(seq_len(T - hv_length), 1)
hv_multiplier <- runif(1, min = high_vol_strength_min, max = high_vol_strength_max)
range_idx <- hv_start:(hv_start + hv_length - 1)
eps[range_idx, ] <- eps[range_idx, ] * hv_multiplier
# store these in hv_periods so we can reuse them
hv_periods$hv_start[i]  <- hv_start
hv_periods$hv_length[i] <- hv_length
}
}
# --- INDIVIDUAL SHOCKS ------------------------------------------------------
num_indiv_shocks_vec <- sample(min_indiv_shocks:max_indiv_shocks, K, replace = TRUE)
for (k in 1:K) {
n_indiv_shocks <- num_indiv_shocks_vec[k]
if (n_indiv_shocks > 0) {
for (s in 1:n_indiv_shocks) {
indiv_shock_length  <- sample(indiv_shock_length_min:indiv_shock_length_max, 1)
indiv_shock_start   <- sample(seq_len(T - indiv_shock_length), 1)
indiv_shock_amplitude <- runif(1, indiv_shock_ampl_min, indiv_shock_ampl_max)
indiv_shock_sign      <- sample(c(-1, 1), 1)
indiv_shock_amplitude <- indiv_shock_amplitude * indiv_shock_sign
for (i in 0:(indiv_shock_length - 1)) {
t_index <- indiv_shock_start + i
eps[t_index, k] <- eps[t_index, k] + indiv_shock_amplitude * (indiv_shock_decay^i)
}
}
}
}
# --- EXOGENOUS SHOCKS -------------------------------------------------------
n_exog_shocks <- sample(min_exog_shocks:max_exog_shocks, 1)
if (n_exog_shocks > 0) {
for (s in 1:n_exog_shocks) {
exog_shock_length    <- sample(exog_shock_length_min:exog_shock_length_max, 1)
exog_shock_amplitude <- runif(K, exog_shock_ampl_min, exog_shock_ampl_max)
# pick a random vola period to center around
if (number_high_vol_periods > 0) {
idx <- sample(seq_len(nrow(hv_periods)), 1)
center <- hv_periods$hv_start[idx]
# shift the exog shock start
offset <- sample(seq(-exog_shock_shift_range, exog_shock_shift_range), 1)
exog_start <- center + offset
} else {
# if no vola periods, just pick random start
exog_start <- sample(seq_len(T - exog_shock_length), 1)
}
# safety check
if (exog_start < 1) exog_start <- 1
if (exog_start + exog_shock_length - 1 > T) {
exog_shock_length <- T - exog_start + 1
}
# sign can differ for each variable
sign_vec <- sample(c(-1, 1), 1)
# apply to all K variables
for (i in 0:(exog_shock_length - 1)) {
t_index <- exog_start + i
for (k in 1:K) {
eps[t_index, k] <- eps[t_index, k] +
exog_shock_amplitude[k] * (exog_shock_decay^i) * sign_vec
}
}
}
}
return(eps)
}
k <- 7
p <- 3
T_data <- 40
Yraw <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
Yraw
plot(Yraw[,1], type = "l")
Yraw <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
plot(Yraw[,1], type = "l")
Y <- Yraw
temp_cov <- helper_build_cov_matrix(Y = Y, p = p, v = v0,
s2_diag = s2_diag,
intercept = intercept,
pi1 = pi1,
pi3 = pi3,
pi4 = pi4)
V0 <- temp_cov$V0
S0 <- temp_cov$S0
V0
S0
dummy_pars_ex <- list(delta = 1.0,
gamma = 1.0,
prior_mean = NULL)
intercept = FALSE
start <- Sys.time()
res_gibbs <- run_bvar(
Yraw         = Yraw,
p            = p,
intercept    = intercept,
use_dummies  = FALSE,
dummy_pars   = dummy_pars_ex,
use_flat     = FALSE,
lag_mean     = 1,
pi1          = 0.2,
pi3          = 1,
pi4          = 1000,
sigma_vec    = NULL,
n_draws      = 5000,
burnin       = 1000
)
mcmc <- Sys.time() - start
mcmc
# ---- inspect outputs ---------------------------------------------------------
Phi_post_median   <- apply(res_gibbs$Phi, c(1,2), median)
Sigma_post_median <- apply(res_gibbs$Sigma, c(1,2), median)
# give names to results
varNames <- paste0("Y", 1:k)
rowNamesPhi <- c("Intercept")
for (i in 1:p) {
rowNamesPhi <- c(rowNamesPhi, paste0("Lag", rep(i, k)))
}
if(!intercept) rowNamesPhi <- rowNamesPhi[-1]
dimnames(Phi_post_median) <- list(rowNamesPhi, varNames)
dimnames(Sigma_post_median) <- list(varNames, varNames)
# view results
Phi_post_median
Sigma_post_median
# ---- predict data ------------------------------------------------------------
# draw from posterior predictive distribution
start <- Sys.time()
Y_forecasts <- predict_bvar(
Phi_store   = res_gibbs$Phi,
Sigma_store = res_gibbs$Sigma,
Yraw        = Yraw,
p           = p,
H           = 4,
draw_shocks = TRUE,
intercept = intercept,
n_cores = 2
)
pred <- Sys.time() - start
((pred + mcmc) * 10000) / (60*60)
# inspect results
alpha <- 0.05
Y_forecast_median <- apply(Y_forecasts, c(1, 2), median)
Y_forecast_ci_lower <- apply(Y_forecasts, c(1, 2), quantile, probs = alpha/2)
Y_forecast_ci_upper <- apply(Y_forecasts, c(1, 2), quantile, probs = (1-alpha/2))
Y_forecast_median
Y_forecast_ci_lower
Y_forecast_ci_upper
res_gibbs <- run_bvar(
Yraw         = Yraw,
p            = p,
intercept    = intercept,
use_dummies  = TRUE,
dummy_pars   = dummy_pars_ex,
use_flat     = FALSE,
lag_mean     = 1,
pi1          = 0.2,
pi3          = 1,
pi4          = 1000,
sigma_vec    = NULL,
n_draws      = 5000,
burnin       = 1000
)
mcmc <- Sys.time() - start
mcmc
Phi_post_median   <- apply(res_gibbs$Phi, c(1,2), median)
Sigma_post_median <- apply(res_gibbs$Sigma, c(1,2), median)
# give names to results
varNames <- paste0("Y", 1:k)
rowNamesPhi <- c("Intercept")
for (i in 1:p) {
rowNamesPhi <- c(rowNamesPhi, paste0("Lag", rep(i, k)))
}
if(!intercept) rowNamesPhi <- rowNamesPhi[-1]
dimnames(Phi_post_median) <- list(rowNamesPhi, varNames)
dimnames(Sigma_post_median) <- list(varNames, varNames)
# view results
Phi_post_median
Sigma_post_median
start <- Sys.time()
Y_forecasts <- predict_bvar(
Phi_store   = res_gibbs$Phi,
Sigma_store = res_gibbs$Sigma,
Yraw        = Yraw,
p           = p,
H           = 4,
draw_shocks = TRUE,
intercept = intercept,
n_cores = 2
)
pred <- Sys.time() - start
((pred + mcmc) * 10000) / (60*60)
# inspect results
alpha <- 0.05
Y_forecast_median <- apply(Y_forecasts, c(1, 2), median)
Y_forecast_ci_lower <- apply(Y_forecasts, c(1, 2), quantile, probs = alpha/2)
Y_forecast_ci_upper <- apply(Y_forecasts, c(1, 2), quantile, probs = (1-alpha/2))
Y_forecast_median
Y_forecast_ci_lower
Y_forecast_ci_upper
?mse
h <- 4
T_data <- 40 + h
Yraw <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
T_data-4
Ypred <- Yraw[1:(T_data-4),]
nrow(Yraw)
nrow(Yraw)-h+1
(T_data-h+1):T_data
Ypred <- Yraw[(T_data-h+1):T_data,]
data <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
T_data
T_data-h
Ypred <- data[(T_data-h+1):T_data,]
Yraw <- data[1:(T_data-h),]
Yraw
Ypred
k <- 7
p <- 3
h <- 4
T_data <- 40 + h
data <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
Ypred <- data[(T_data-h+1):T_data,]
Yraw <- data[1:(T_data-h),]
# ---- run Minnesota Gibbs Sampling --------------------------------------------
dummy_pars_ex <- list(delta = 1.0,
gamma = 1.0,
prior_mean = NULL)
intercept = FALSE
start <- Sys.time()
res_gibbs <- run_bvar(
Yraw         = Yraw,
p            = p,
intercept    = intercept,
use_dummies  = TRUE,
dummy_pars   = dummy_pars_ex,
use_flat     = FALSE,
lag_mean     = 1,
pi1          = 0.2,
pi3          = 1,
pi4          = 1000,
sigma_vec    = NULL,
n_draws      = 5000,
burnin       = 1000
)
mcmc <- Sys.time() - start
mcmc
# ---- inspect outputs ---------------------------------------------------------
Phi_post_median   <- apply(res_gibbs$Phi, c(1,2), median)
Sigma_post_median <- apply(res_gibbs$Sigma, c(1,2), median)
# give names to results
varNames <- paste0("Y", 1:k)
rowNamesPhi <- c("Intercept")
for (i in 1:p) {
rowNamesPhi <- c(rowNamesPhi, paste0("Lag", rep(i, k)))
}
if(!intercept) rowNamesPhi <- rowNamesPhi[-1]
dimnames(Phi_post_median) <- list(rowNamesPhi, varNames)
dimnames(Sigma_post_median) <- list(varNames, varNames)
# view results
Phi_post_median
Sigma_post_median
# ---- predict data ------------------------------------------------------------
# draw from posterior predictive distribution
start <- Sys.time()
Y_forecasts <- predict_bvar(
Phi_store   = res_gibbs$Phi,
Sigma_store = res_gibbs$Sigma,
Yraw        = Yraw,
p           = p,
H           = h,
draw_shocks = TRUE,
intercept = intercept,
n_cores = 2
)
pred <- Sys.time() - start
((pred + mcmc) * 10000) / (60*60)
# inspect results
alpha <- 0.05
Y_forecast_median <- apply(Y_forecasts, c(1, 2), median)
Y_forecast_ci_lower <- apply(Y_forecasts, c(1, 2), quantile, probs = alpha/2)
Y_forecast_ci_upper <- apply(Y_forecasts, c(1, 2), quantile, probs = (1-alpha/2))
Y_forecast_median
Y_forecast_ci_lower
Y_forecast_ci_upper
Y_forecast_median - Ypred
Y_forecast_median
Ypred
0.012581007 - -0.03437350
0.012581007 - -0.03437350
-0.012655109 - 0.04207165
mean((Y_forecast_median - Ypred)^2)
pred_mse <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast))
pred_mse <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median))
pred_mse
rownames(Y_forecast_median)
pred_mse <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median), dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
pred_mse
pred_mse <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median),
dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
for (row in 1:nrow(pred_mse)) {
for (col in 1:nrow(pred_mse)) {
pred_mse[row, col] <- mean((Y_forecast_median[row, col] - Ypred[row, col])^2)
}
}
pred_mse
1:nrow(pred_mse)
for (row in 1:nrow(pred_mse)) {
for (col in 1:ncol(pred_mse)) {
pred_mse[row, col] <- mean((Y_forecast_median[row, col] - Ypred[row, col])^2)
}
}
pred_mse
pred_mae <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median),
dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
pred_mse <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median),
dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
pred_mae <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median),
dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
for (row in 1:nrow(pred_mse)) {
for (col in 1:ncol(pred_mse)) {
pred_mse[row, col] <- mean((Y_forecast_median[row, col] - Ypred[row, col])^2)
pred_mae[row, col] <- mean(abs(Y_forecast_median[row, col] - Ypred[row, col]))
}
}
pred_mse
pred_mae
Y_forecast_median
Ypred
pred_error_mat <- matrix(NA, nrow(Y_forecast_median), ncol(Y_forecast_median),
dimnames = list(rownames(Y_forecast_median), paste0("Y", 1:k)))
for (row in 1:nrow(pred_mse)) {
for (col in 1:ncol(pred_mse)) {
pred_error_mat[row, col] <- abs(Y_forecast_median[row, col] - Ypred[row, col])
}
}
pred_error_mat
