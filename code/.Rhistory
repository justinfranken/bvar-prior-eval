"_distr_samplers.R",
"_hierarch_fun.R",
"_data_prep.R",
"_mcmc.R",
"_ssvs.R",
"_prior_specification.R",
"bvar.R",
"simulate_data.R",
"_mcmc_convergence.R"
)
for (i in 1:length(function_files)) {
source(paste0(getwd(),"/functions/", function_files[i]))
}
rm(i)
rm(function_files)
# ------------------------------------------------------------------------------
# simulate data
# ------------------------------------------------------------------------------
k <- 7
p <- 2
h <- 4
T_data <- 40 + h
data <- sim_y(k, p, T_data,
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0)
Ypred <- data[(T_data-h+1):T_data,]
Yraw <- data[1:(T_data-h),]
# ------------------------------------------------------------------------------
# get posterior chain draws
# ------------------------------------------------------------------------------
# ---- set hyper parameters and setting ----------------------------------------
intercept = TRUE
p_bvar <- 4
dummy_pars_ex <- list(mu = 1.0,
gamma = 1.0,
prior_mean = NULL)
mh_params <- list(
n_thin <- 1,
scale_hess <- 0.06,
adjust_burn <- 0.75,
acc_lower <- 0.12,
acc_upper <- 0.28,
acc_change <- 0.05
)
hyper_params <- list(pi1_param = calc_gamma_pdf_params(m = 0.2, s = 0.4),
mu_param = calc_gamma_pdf_params(m = 1, s = 1),
gamma_param = calc_gamma_pdf_params(m = 1, s = 1),
s2_diag_param = list(a = 0.02^2, b = 0.02^2,
mode = hhelper_compute_sigma_vec(Yraw, p)))
# ---- run Minnesota Gibbs Sampling --------------------------------------------
res_gibbs <- run_bvar_minnesota(
Yraw         = Yraw,
p            = p_bvar,
intercept    = intercept,
use_dummies  = FALSE,
dummy_pars   = dummy_pars_ex,
use_flat     = FALSE,
lag_mean     = 1,
pi1          = 0.2,
pi3          = 1,
pi4          = 1000,
sigma_vec    = NULL,
n_draws      = 5000,
burnin       = 500
)
# ---- run Metropolis Hastings sampler -----------------------------------------
res_mh <- run_bvar_hierarch(Yraw = Yraw,
pi4 = 1000,
lag_mean = 1.0,
p = p_bvar,
intercept = intercept,
hyper_params = hyper_params,
mh_params = mh_params,
n_draws = 5000,
burnin = 500)
# ---- run SSVS sampler --------------------------------------------------------
res_ssvs <- run_bvar_ssvs(Yraw,
p_bvar,
intercept = intercept,
use_dummies = FALSE,
dummy_pars = dummy_pars_ex,
lag_mean = 1,
tau0 = 1/10,
tau1 = 10,
delta_prob = 0.8,
n_draws = 5000,
burnin = 500)
brooks_plot(res_gibbs, B = 500, coef = 1, coef_row = 3, coef_col = 2)
brooks_plot <- function(out_obj, B, coef, coef_row, coef_col){
#' Generates a Brooks-style CUSUM hairiness plot for a selected BVAR coefficient.
#'
#' Parameters:
#' - out_obj (list): An MCMC output object that contains the posterior draws of BVAR coefficients.
#' - B (integer): The burn-in index, indicating the number of initial draws to discard.
#' - coef (integer): Either 1 for Phi or 2 for Sigma.
#' - coef_row (integer): The row index of the coefficient to be plotted.
#' - coef_col (integer): The column index of the coefficient to be plotted.
#'
#' Returns:
#' - A Brooks-style CUSUM hairiness plot for the selected coefficient is produced.
chain <- out_obj[[coef]][coef_row,coef_col,]
# get smoothness running means
res <- helper_cusum_hairiness(chain, B)
D_vals <- res$D
lower <- res$L
upper <- res$U
# plot only after burn-in
t_seq <- (B+2):length(D_vals)
# create plot
plot(
x    = t_seq,
y    = D_vals[t_seq],
type = "l",
xlab = "Iteration t",
ylab = expression(D[t]),
main = paste0("CUSUM Hairiness Measure of ", ifelse(coef == 1, "Phi", "Sigma"), "[", coef_row, ",", coef_col, "]")
)
lines(t_seq, lower[t_seq], col = "red", lty = 2)
lines(t_seq, upper[t_seq], col = "red", lty = 2)
abline(h = 0.5, col = "gray")
}
brooks_plot(res_gibbs, B = 500, coef = 1, coef_row = 3, coef_col = 2)
brooks_plot(res_gibbs, B = 500, coef = 1, coef_row = 3, coef_col = 2)
brooks_plot(res_mh, B = 500, coef = 1, coef_row = 3, coef_col = 2)
brooks_plot(res_ssvs, B = 500, coef = 1, coef_row = 3, coef_col = 2)
res_mh$hyper_parameters
brooks_plot <- function(out_obj, B, coef, coef_row, coef_col, hyper = FALSE){
#' Generates a Brooks-style CUSUM hairiness plot for a selected BVAR coefficient.
#'
#' Parameters:
#' - out_obj (list): An MCMC output object that contains the posterior draws of BVAR coefficients.
#' - B (integer): The burn-in index, indicating the number of initial draws to discard.
#' - coef (integer): Either 1 for Phi or 2 for Sigma. If hyper = TRUE coef determines
#' column of hyperparameter to be used.
#' - coef_row (integer): The row index of the coefficient to be plotted.
#' - coef_col (integer): The column index of the coefficient to be plotted.
#'
#' Returns:
#' - A Brooks-style CUSUM hairiness plot for the selected coefficient is produced.
if(!hyper){
chain <- out_obj[[coef]][coef_row,coef_col,]
} else{
out_obj$hyper_parameters[,coef]
}
# get smoothness running means
res <- helper_cusum_hairiness(chain, B)
D_vals <- res$D
lower <- res$L
upper <- res$U
# plot only after burn-in
t_seq <- (B+2):length(D_vals)
# create plot
plot(
x    = t_seq,
y    = D_vals[t_seq],
type = "l",
xlab = "Iteration t",
ylab = expression(D[t]),
main = paste0("CUSUM Hairiness Measure of ", ifelse(coef == 1, "Phi", "Sigma"), "[", coef_row, ",", coef_col, "]")
)
lines(t_seq, lower[t_seq], col = "red", lty = 2)
lines(t_seq, upper[t_seq], col = "red", lty = 2)
abline(h = 0.5, col = "gray")
}
brooks_plot(res_mh, B = 500, coef = 1, coef_row = 3, coef_col = 2, hyper = TRUE)
brooks_plot <- function(out_obj, B, coef, coef_row, coef_col, hyper = FALSE){
#' Generates a Brooks-style CUSUM hairiness plot for a selected BVAR coefficient.
#'
#' Parameters:
#' - out_obj (list): An MCMC output object that contains the posterior draws of BVAR coefficients.
#' - B (integer): The burn-in index, indicating the number of initial draws to discard.
#' - coef (integer): Either 1 for Phi or 2 for Sigma. If hyper = TRUE coef determines
#' column of hyperparameter to be used.
#' - coef_row (integer): The row index of the coefficient to be plotted.
#' - coef_col (integer): The column index of the coefficient to be plotted.
#'
#' Returns:
#' - A Brooks-style CUSUM hairiness plot for the selected coefficient is produced.
if(!hyper){
chain <- out_obj[[coef]][coef_row,coef_col,]
} else{
chain <- out_obj$hyper_parameters[,coef]
}
# get smoothness running means
res <- helper_cusum_hairiness(chain, B)
D_vals <- res$D
lower <- res$L
upper <- res$U
# plot only after burn-in
t_seq <- (B+2):length(D_vals)
# create plot
plot(
x    = t_seq,
y    = D_vals[t_seq],
type = "l",
xlab = "Iteration t",
ylab = expression(D[t]),
main = paste0("CUSUM Hairiness Measure of ", ifelse(coef == 1, "Phi", "Sigma"), "[", coef_row, ",", coef_col, "]")
)
lines(t_seq, lower[t_seq], col = "red", lty = 2)
lines(t_seq, upper[t_seq], col = "red", lty = 2)
abline(h = 0.5, col = "gray")
}
brooks_plot(res_mh, B = 500, coef = 1, coef_row = 3, coef_col = 2, hyper = TRUE)
brooks_plot(res_mh, B = 500, coef = 2, coef_row = 3, coef_col = 2, hyper = TRUE)
brooks_plot(res_mh, B = 500, coef = 3, coef_row = 3, coef_col = 2, hyper = TRUE)
brooks_plot <- function(out_obj, B, coef, coef_row, coef_col){
#' Generates a Brooks-style CUSUM hairiness plot for a selected BVAR coefficient.
#'
#' Parameters:
#' - out_obj (list): An MCMC output object that contains the posterior draws of BVAR coefficients.
#' - B (integer): The burn-in index, indicating the number of initial draws to discard.
#' - coef (integer): Either 1 for Phi or 2 for Sigma.
#' - coef_row (integer): The row index of the coefficient to be plotted.
#' - coef_col (integer): The column index of the coefficient to be plotted.
#'
#' Returns:
#' - A Brooks-style CUSUM hairiness plot for the selected coefficient is produced.
chain <- out_obj[[coef]][coef_row,coef_col,]
# get smoothness running means
res <- helper_cusum_hairiness(chain, B)
D_vals <- res$D
lower <- res$L
upper <- res$U
# plot only after burn-in
t_seq <- (B+2):length(D_vals)
# create plot
plot(
x    = t_seq,
y    = D_vals[t_seq],
type = "l",
xlab = "Iteration t",
ylab = expression(D[t]),
main = paste0("CUSUM Hairiness Measure of ", ifelse(coef == 1, "Phi", "Sigma"), "[", coef_row, ",", coef_col, "]")
)
lines(t_seq, lower[t_seq], col = "red", lty = 2)
lines(t_seq, upper[t_seq], col = "red", lty = 2)
abline(h = 0.5, col = "gray")
}
lag_mean <- 0.9
# ---- setting up simulation ---------------------------------------------------
# -- global simulation settings -----------------
n_iter <- 10
# ------------------------------------------------------------------------------
# import libraries
# ------------------------------------------------------------------------------
source(paste0(getwd(),"/lib.r"))
# ------------------------------------------------------------------------------
# import functions
# ------------------------------------------------------------------------------
function_files <- c(
"_distr_samplers.R",
"_monte_carlo_fun.R",
"_forecast.R",
"_hierarch_fun.R",
"_data_prep.R",
"_mcmc.R",
"_ssvs.R",
"_prior_specification.R",
"bvar.R",
"simulate_data.R"
)
for (i in 1:length(function_files)) {
source(paste0(getwd(),"/functions/", function_files[i]))
}
rm(i)
rm(function_files)
# ------------------------------------------------------------------------------
# Monte Carlo Simulation Setup
# ------------------------------------------------------------------------------
# ---- setting up simulation ---------------------------------------------------
# -- global simulation settings -----------------
n_iter <- 10
n_draws <- 5000
burnin <- 500
intercept <- TRUE
h <- 4
p_bvar <- 4
p <- 3
k <- 7
m <- k * p + as.integer(intercept)
lag_mean <- 0.9
alpha <- 0.05
dummy_pars <- list(mu = 1.0,
gamma = 1.0,
prior_mean = NULL)
mh_params <- list(
n_thin <- 1,
scale_hess <- 0.04,
adjust_burn <- 0.75,
acc_lower <- 0.12,
acc_upper <- 0.28,
acc_change <- 0.05
)
# -- sim_pars settings --------------------------
sim_params_no_shocks <- list(
min_indiv_shocks = 0,
max_indiv_shocks = 0,
min_high_vol_periods = 0,
max_high_vol_periods = 0,
min_exog_shocks = 0,
max_exog_shocks = 0
)
sim_params_with_shocks <- list(
min_indiv_shocks = 0,
max_indiv_shocks = 1,
min_high_vol_periods = 1,
max_high_vol_periods = 1,
min_exog_shocks = 1,
max_exog_shocks = 1
)
# ---- Monte Carlo Simulation small observations -------------------------------
n_obs <- 40
start <- Sys.time()
small_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
end <- Sys.time() - start
small_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ---- Monte Carlo Simulation medium observations ------------------------------
n_obs <- 60
medium_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
medium_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ---- Monte Carlo Simulation large observations -------------------------------
n_obs <- 80
large_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
large_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ------------------------------------------------------------------------------
# evaluate simulation results
# ------------------------------------------------------------------------------
# --- clarify models being used ------------------------------------------------
models <- c("classic_mn", "hierarch_mn", "ssvs", "flat_mn", "var")
small_no_shock <- evaluate_sim_res(small_out_no_shock, models = models, h = h, n_iter = n_iter)
small_with_shock <- evaluate_sim_res(small_out_with_shock, models = models, h = h, n_iter = n_iter)
medium_no_shock <- evaluate_sim_res(medium_out_no_shock, models = models, h = h, n_iter = n_iter)
medium_with_shock <- evaluate_sim_res(medium_out_with_shock, models = models, h = h, n_iter = n_iter)
large_no_shock <- evaluate_sim_res(large_out_no_shock, models = models, h = h, n_iter = n_iter)
large_with_shock <- evaluate_sim_res(large_out_with_shock, models = models, h = h, n_iter = n_iter)
small_no_shock
small_with_shock
medium_no_shock
medium_with_shock
large_no_shock
large_with_shock
lag_mean <- 1.0
# ---- Monte Carlo Simulation small observations -------------------------------
n_obs <- 40
start <- Sys.time()
small_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
end <- Sys.time() - start
small_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ---- Monte Carlo Simulation medium observations ------------------------------
n_obs <- 60
medium_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
medium_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ---- Monte Carlo Simulation large observations -------------------------------
n_obs <- 80
large_out_no_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_no_shocks)
large_out_with_shock <- simulation(n_iter = n_iter,
n_draws = n_draws,
burnin = burnin,
n_obs = n_obs,
k = k, p = p, m = m, h = h,
intercept = intercept,
p_bvar = p_bvar,
alpha = alpha,
lag_mean = lag_mean,
dummy_pars = dummy_pars,
mh_params = mh_params,
sim_params = sim_params_with_shocks)
# ------------------------------------------------------------------------------
# evaluate simulation results
# ------------------------------------------------------------------------------
# --- clarify models being used ------------------------------------------------
models <- c("classic_mn", "hierarch_mn", "ssvs", "flat_mn", "var")
small_no_shock <- evaluate_sim_res(small_out_no_shock, models = models, h = h, n_iter = n_iter)
small_with_shock <- evaluate_sim_res(small_out_with_shock, models = models, h = h, n_iter = n_iter)
medium_no_shock <- evaluate_sim_res(medium_out_no_shock, models = models, h = h, n_iter = n_iter)
medium_with_shock <- evaluate_sim_res(medium_out_with_shock, models = models, h = h, n_iter = n_iter)
large_no_shock <- evaluate_sim_res(large_out_no_shock, models = models, h = h, n_iter = n_iter)
large_with_shock <- evaluate_sim_res(large_out_with_shock, models = models, h = h, n_iter = n_iter)
small_no_shock
small_with_shock
medium_no_shock
medium_with_shock
large_no_shock
large_with_shock
0.5*10000
5000/60
